//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication3.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ADODotNetDemoEntities : DbContext
    {
        public ADODotNetDemoEntities()
            : base("name=ADODotNetDemoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
    
        public virtual ObjectResult<fn_All_Result> fn_All(string name, Nullable<int> optionType)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var optionTypeParameter = optionType.HasValue ?
                new ObjectParameter("OptionType", optionType) :
                new ObjectParameter("OptionType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fn_All_Result>("fn_All", nameParameter, optionTypeParameter);
        }
    
        public virtual int sp_DeparmentInsert(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeparmentInsert", nameParameter);
        }
    
        public virtual ObjectResult<sp_departmentReadAll_Result> sp_departmentReadAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_departmentReadAll_Result>("sp_departmentReadAll");
        }
    
        public virtual int sp_EmployeesDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EmployeesDelete", iDParameter);
        }
    
        public virtual int sp_EmployeesInsert(string name, string job, Nullable<decimal> salary, Nullable<int> departmentID, byte[] photo)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(int));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EmployeesInsert", nameParameter, jobParameter, salaryParameter, departmentIDParameter, photoParameter);
        }
    
        public virtual ObjectResult<sp_EmployeesReadAll_Result> sp_EmployeesReadAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmployeesReadAll_Result>("sp_EmployeesReadAll");
        }
    
        public virtual ObjectResult<sp_EmployeesReadByID_Result> sp_EmployeesReadByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmployeesReadByID_Result>("sp_EmployeesReadByID", idParameter);
        }
    
        public virtual int sp_EmployeesUpdate(Nullable<int> iD, string name, string job, Nullable<decimal> salary, Nullable<int> departmentID, byte[] photo)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(int));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EmployeesUpdate", iDParameter, nameParameter, jobParameter, salaryParameter, departmentIDParameter, photoParameter);
        }
    }
}
